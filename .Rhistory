# list the table. This confirms we connected to the database.
dbListTables(storiesDb)
# disconnect to clean up the connection to the database.
dbDisconnect(storiesDb)
library(RMariaDB)
# The connection method below uses a password stored in a settings file.
# R needs a full path to find the settings file.
rmariadb.settingsfile<-"C:\\Users\\anne.klammt\\Desktop\\newspaper_search_results.cnf"
rmariadb.db<-"newspaper_search_results"
storiesDb<-dbConnect(RMariaDB::MariaDB(),default.file=rmariadb.settingsfile,group=rmariadb.db)
# list the table. This confirms we connected to the database.
dbListTables(storiesDb)
# disconnect to clean up the connection to the database.
dbDisconnect(storiesDb)
library(RMariaDB)
# The connection method below uses a password stored in a settings file.
# R needs a full path to find the settings file.
rmariadb.settingsfile<-"C:\\Users\\anne.klammt\\Desktop\\newspaper_search_results.cnf"
rmariadb.db<-"newspaper_search_results"
storiesDb<-dbConnect(RMariaDB::MariaDB(),default.file=rmariadb.settingsfile,group=rmariadb.db)
# list the table. This confirms we connected to the database.
dbListTables(storiesDb)
# disconnect to clean up the connection to the database.
dbDisconnect(storiesDb)
library(RMariaDB)
# The connection method below uses a password stored in a settings file.
# R needs a full path to find the settings file.
rmariadb.settingsfile<-"C:\\Users\\anne.klammt\\Desktop\\newspaper_search_results.cnf"
rmariadb.db<-"newspaper_search_results"
storiesDb<-dbConnect(RMariaDB::MariaDB(),default.file=rmariadb.settingsfile,group=rmariadb.db)
# list the table. This confirms we connected to the database.
dbListTables(storiesDb)
# disconnect to clean up the connection to the database.
dbDisconnect(storiesDb)
localuserpassword <- "DWu1000_BUFM"
library(RMariaDB)
# The connection method below uses a password stored in a settings file.
# R needs a full path to find the settings file.
rmariadb.settingsfile<-"C:\\Users\\anne.klammt\\Desktop\\newspaper_search_results.cnf"
rmariadb.db<-"newspaper_search_results"
storiesDb<-dbConnect(RMariaDB::MariaDB(),default.file=rmariadb.settingsfile,group=rmariadb.db)
# list the table. This confirms we connected to the database.
dbListTables(storiesDb)
# disconnect to clean up the connection to the database.
dbDisconnect(storiesDb)
q
source('~/R/newspaper_search.R')
install.packages("RMariaDB")
library(RMariaDB)
localuserpassword <- "SomethingDifficult"
localuserpassword <- "prog_hist"
dbDisconnect(storiesDb)
dbDisconnect(newspaper_search_resultsDb)
> localuserpassword <- "prog_hist_2019"
library(RMariaDB)
localuserpassword <- "prog_hist_2019"
dbDisconnect(storiesDb)
# disconnect to clean up the connection to the database.
dbDisconnect(storiesDb)
# list the table. This confirms we connected to the database.
dbListTables(storiesDb)
# disconnect to clean up the connection to the database.
dbDisconnect(storiesDb)
# disconnect to clean up the connection to the database.
dbDisconnect(storiesDb)
help.search("dbDisconnect")
# list the table. This confirms we connected to the database.
dbListTables(storiesDb)
library("RSQLServer")
# R needs a full path to find the settings file.
rmariadb.settingsfile<-"C:\Daten\newspaper_search_results.cnf"
# R needs a full path to find the settings file.
rmariadb.settingsfile<-"C:\\Daten\\newspaper_search_results.cnf"
# R needs a full path to find the settings file.
rmariadb.settingsfile<-"C:\Data\newspaper_search_results.cnf"
# R needs a full path to find the settings file.
rmariadb.settingsfile<-"C:\\Data\\newspaper_search_results.cnf"
localuserpassword <- "prog_Hist_2019A"
dbDisconnect(storiesDb)
install.packages("RSQlite")
install.packages("RSQLite")
x<- 0:10
x
x <- -5:5
x
x <- -30:30
x/0.1
x <- -30:30
x/10
y <-exp(x)
plot(y)
y
y <-2-exp(2)
plot(y)
y <-2+exp(2)
plot(y)
y<-5-exp(x)
plot(y)
t <-c("mo", "di", "mi", "do", "fr")
t
m<- c(90, 80, 50, 20, 5, 50)
X<- cbind(t, u)
X<- cbind(t, m)
X
t <-c("mo", "di", "mi", "do", "fr" "sa")
t <-c("mo", "di", "mi", "do", "fr", "sa")
X
t <-c("mo", "di", "mi", "do", "fr", "sa")
X<- cbind(t, m)
X
namen <- c("Wochentag", "Motivation")
colnames(X)<- namen
X
X[7, ]<- r("so", 100)
X[7, ]<- row("so", 100)
t <-c("mo", "di", "mi", "do", "fr", "sa", "so")
m<- c(90, 80, 50, 20, 5, 50, 100)
X
X<- cbind(t, m)
X
namen <- c("Wochentag", "Motivation")
colnames(X)<- namen
X
Ergebnis <- "Studie"
X <-data.frame(t, m)
X
namen <-c("Wochentag", "Motivation")
colnames(X) <-namen
X
fragebogen<- edit(data.frame())
head(fragebogen, 4)
tail(1:5, 3)
tail()
tail(1)
head(fragebogen, 4)
head(fragebogen, 3)
head(fragebogen, 2)
fix(fragebogen)
head(fragebogen, 4)
save(fragebogen, file="fragebogen.RData")
fragebogen[1:3, "entsch"]
fragebogen$entscg[1:3]
fragebogen$entsch[1:3]
fragebogen$entsch
attach(fragebogen)
entsch
x<-entsch+date
x
detach(fragebogen)
x<- c(1, 2, 23, 1, 1, 2, 2)
x
x_fact<- factor(x)
x_fact
x<- c(1, 2, 2, 3, 1, 1, 2, 2)
x_fact<- factor(x)
x_fact
x_fact <- factor(x, labels = c("A", "B", "C"))
x_fact
x_fact2 <-fact_x
x_fact2 <- x_fact
lavels(x_facts) <- c("AA", "BB", "CC")
lavels(x_fact2) <- c("AA", "BB", "CC")
levels(x_fact2) <- c("AA", "BB", "CC")
x_fact2
levels(x_fact)
x_fact3 <- factor(x_fact2, levels = c("CC", "BB", "AA"))
x_fact3
table(x_fact2)
table(x_fact3)
x_fact4 <- x_fact
x_fact4
levels(x-fact4) <-c("CC", "AA", "BB")
levels(x_fact4) <-c("CC", "AA", "BB")
x_fact4
x_fact <-factor(x, labels = c("C", "B", "A")
)
x_fact <-factor(x, labels = c("C", "B", "A"))
x_fact
table(x_fact)
x_fact1 <-factor(x_fact, labels = c("CC", "BB", "AA"))
x_fact1
x_fact2 <- x_fact
x_fact2
levels(x_fact2) <- c("CC", "BB", "AA")
x_fact2
levels(x_fact)
levels(x_fact2)
x_fact3 <- factor(x_facts, levels= c("AA", "BB", "CC"))
x_fact3 <- factor(x_fact2, levels= c("AA", "BB", "CC"))
x_fact3
table(X_fact3)
table(x_fact3)
table(x_fact2)
x_fact4 <-x_fact
levels(x_fact4) <-c("AA", "BB", "CC")
x_fact4
table(x_fact4)
save.image("C:\\Users\\anne.klammt\\Desktop\\RDATA\\Lektion4.RData")
fragebogen$sex <-factor(fragebogen$sex, labels=c("w", "m")
fragebogen$sex <-factor(fragebogen$sex, labels=c("w", "m"))
fragebogen$sex <-factor(fragebogen$sex, labels = c("w", "m"))
head(fragebogensex)
head(fragebogen$sex)
fragebogen$sex <-factor(fragebogen$sex, labels = c("m", "w"))
head(fragebogen$sex)
fragebogen$sex <-factor(fragebogen$sex, labels = c("w", "m"))
head(fragebogen$sex)
fragebogenJ <-subset(fragebogen, mon <240)
head(fragebogenJ)
fragebogenJ <- subset(fragebogen, mon > 240)
head(fragebogenJ)
fragebogenJG <-subset(fragebogen, (mon <240) & (gross >= 180))
head(fragebogenJG)
fix(fragebogen)
head(fragebogenJG)
fix(fragebogen)
fragebogenJG <-subset(fragebogen, (mon <240) & (gross >= 180))
head(fragebogenJG)
fragebogenW <- subset(fragebogen, sex == "w")
head(fragebogenW)
fragebogen_ohneNA <. na.omit(fragebogen)
fragebogen_ohneNA <- na.omit(fragebogen)
head(fragebogen_ohneNA)
fix(fragebogen)
subset(fragebogen, is.na(sex))
fragebogen_DE_M <- subset(fragebogen, sex == "m", select = c(date, entsch))
head(fragebogen_DE_M)
subset(fragebogen, select = -c(sex, mon))
subset(fragebogen, select = c(sex, var9:var11))
attach(fragebogen)
alter <- mon/12
alter [1:6]
alter <- runc(mon/12)
alter <- trunc(mon/12)
alter[1:6]
alter_gerundet <- round(mon/12)
alter_gerundet [1:6]
alter_gerundet <- round(mon/12, digits=1)
alter_gerundet[1:6]
save.image("C:\\Users\\anne.klammt\\Desktop\\RDATA\\Lektion4.RData")
fix(fragebogen)
i1u <- 6-i1
head(fragebogen)
i1u <- 6 -i1
attach(fragebogen)
i2u <- 6-i2
head(i2u)
fix(fragebogen)
i1u <- 6-i1
i3u <- 6-i3
stress <-i1u + i2 + i3u + i4 + i5
stress[1:6]
x <-1:6
x
ifelse(x<4, "A", "B")
ifelse(x<=4, "A", "B")
ifelse (x<=2, "A", ifelse(x<=5, "B", "C"))
library(car)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
setRepositories()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
setRepositories()
setRepositories()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
update.packages(ask='graphics',checkBuilt=TRUE)
library(car)
library("car")
save.image("C:\\Users\\anne.klammt\\Desktop\\RDATA\\Lektion4.RData")
utils:::menuInstallPkgs()
chooseCRANmirror()
setRepositories()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
setRepositories()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
update.packages(ask='graphics',checkBuilt=TRUE)
utils:::menuInstallPkgs()
setRepositories()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
chooseCRANmirror()
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library("car")
save.image("C:\\Users\\anne.klammt\\Desktop\\RDATA\\Lektion4.RData")
q()
load("C:\\Users\\anne.klammt\\Desktop\\RDATA\\Lektion4.RData")
head(fragebogen)
utils:::menuInstallPkgs()
library("car")
sex.neu <-recode(sex, recodes = '"m"="männlich" ; "w"="weiblich"')
(head)fragebogen
head(fragebogen)
sex.neu <-recode(sex, recodes = '"m"="männlich" ; "w"="weiblich"')
fix(fragebogen)
fix(fragebogen)
head(fragebogen)
sex.neu <-recode(sex, recodes = '"m"="männlich" ; "w"="weiblich"')
sex.neu <-recode("sex", recodes = '"m"="männlich" ; "w"="weiblich"')
sex.neu[1:5]
sex[1:5]
gross[1:3]
head(fragebogen$sex)
attach(fragebogen)
sex.neu <-recode("sex", recodes = '"m"="männlich" ; "w"="weiblich"')
sex.neu[1:5]
sex.neu <-recode(sex, recodes = '"m"="männlich" ; "w"="weiblich"')
sex.neu[1:5]
head(gross)
gross3 <-recode(gross, recodes = 'lo:159 = 1; 160:174 = 2 ; 175:hi = 3')
head(gross3)
gross3 <-recode(gross, recodes = 'lo:159 = 1; 160:174 = 2 ; 175:hi = 3', as.factor.result = TRUE)
gross3 <-recode(gross, recodes = 'lo:159 = 1; 160:174 = 2 ; 175:hi = 3', (as.factor.result = TRUE))
head(gross3)
head(alter)
range(alter)
alter3<-cut(alter, 3)
alter3
trunc(alter3)
alter <-round(mon/12)
alter
alter3 <-cut(alter, 3)
alter3
alter2 <-(alter,  2)
alter2 <-cut(alter,  2)
alter2
alter4 <-(alter, 3)
alter4 <-cut(alter, 3)
alter4
head(data.frame(alter, alter4))
alter.3kat <- cut(alter, 3, labels = c("jung", "mittel, "alt"))
alter.3kat <- cut(alter, 3, labels = c("jung", "mittel, "alt"))
alter.3kat <- cut(alter, 3, labels = c("jung", "mittel", "alt"))
alter3.kat
alter.3kat
grenzen <-c(min(mon), 240, 264, 298, max(mon))
grenzen
mon.4<- cut(mon, breaks = grenzen)
head(mon.4)
breaks <- quantile(mon, (0:4)/4)
breaks
breaks <- quantile(mon, (0:4)/4), (include.lowest = TRUE))
breaks <- quantile(mon, (0:4)/4), include.lowest = TRUE)
breaks <- quantile(mon, (0:4)/4); include.lowest = TRUE)
breaks <- quantile(mon, (0:4)/4); (include.lowest = TRUE)
breaks
master <-fragebogen
master <-transform(master,sex = factor(sex.neu))
head(master$sex)
master <-transform(master,entsch = factor(entsch), proj = factor(proj))
head(master)
head(master$entsch)
master <- transform(master, gross = round(gross/100, digits = 2)
master <- transform(master, gross = round(gross/100, digits = 2))
master <- transform(master, gross = round(gross/100; digits = 2))
master <- transform(master, gross = round(gross/100, digits = 2))
head(master$gross)
master <- transform(master, alter = alter)
head(master$alter)
str(master)
master <- transform(master, lalt = factor(lalt), date = factor(date))
head(master$lalt)
head(master$date)
save.image("C:\\Users\\anne.klammt\\Desktop\\RDATA\\Lektion4.RData")
levels(master$lalt) <- c("älter, "egal", "gleich", "gleich/älter", -2gkeich/jünger", "jünger")
levels(master$lalt) <- c("älter", "egal", "gleich", "gleich/älter", "gleich/jünger", "jünger")
levels((master$date) <- c("Abendessen", "Couch", "Disco", "Kino", "Spazieren", "spontan", "Video")
levels(master$date) <- c("Abendessen", "Couch", "Disco", "Kino", "Spazieren", "spontan", "Video")
levels(master$date) <- c("Abendessen", "Couch", "Disco", "Kino", "Spazieren", "spontan", "Video")
levels(master$entsch) <- c("Freunde", "Intuition", "Logik", "Moral", "was?")
levels(master$proj) <- c("frühzeitig", "Nacht", "Hund")
save(master, file = "master.RData")
summary(master)
which(master$gross > 2, "id")
which(master$gross > 2)
which(master$gross >1.7)
which[master$gross > 1.7, "id"]
class(master$date)
hist(master$date)
hist(mater$gross)
hist(master$gross)
min(master$gross)
max(master$gross)
range(master)
range(mon)
range(alter)
quantile(master$gross)
table(gross)
table(mon)
table(alter)
uebung <- edit(data.frame())
uebung
head(uebung)
fix(uebung
fix(uebung)
fix(uebung)
head(Uebung)
head(uebung)
sace(uebung.RData)
save(uebung.RData)
save(uebung)
save(uebung, file="uebung_4.RData")
load(uebung_4.RData")
load(uebung_4.RData)
load("uebung_4.RData")
fix(uebung)
head(uebung, [1:2])
head(uebung, 1:3)
head(uebung)
table(Geschlecht)
attach(uebung)
table("Geschlecht")
table(Geschlecht)
ifelse(Geschlecht == w, "weiblich", ifelse == m, "männlich", "NA")
ifelse(Geschlecht == w, "weiblich", ifelse(Geschlecht == m, "männlich", "NA"))
ifelse(Geschlecht == "w", "weiblich", ifelse(Geschlecht == "m", "männlich", "NA"))
table(Geschlecht)
uebung.neu <- uebung
uebung.neu <- recode(Geschlecht, recodes ='"m"="männlich" ;  "w"="weiblich" ; "e"="NA"')
head(uebung.neu)
uebung_neu_oNA <- na.omit(uebung.neu)
uebung_neu_oNA
head(uebung_neu_oNA)
head(uebung)
head(uebung.neu)
save.image("C:\\Users\\anne.klammt\\Desktop\\RDATA\\Lektion4.RData")
q()
library(DBI)
library(RSQLite)
library(stats)
# Anbindung Datenbank
con = dbConnect(SQLite(DB), dbname = "Keramik_20190130.db")
my_query <- dbSendQuery(con, "SELECT Fundr FROM RS_Tab")
listTables(Keramik_20190130)
head(Keramik_20190130)
my_query <- dbSendQuery(con)
my_query <- dbSendQuery(con, "SELECT Fundr FROM RS_Tab")
con = dbConnect(SQLite(DB), dbname = "Keramik_20190130.db")
con = dbConnect(SQLite(DB), dbname = "Keramik_20190130.db")
my_query <- dbSendQuery(con, "SELECT Fundr FROM RS_Tab")
my_query <- dbSendQuery(con, "SELECT Fundnr FROM RS_Tab")
my_data <- dbFetch(may_query, n=-1)
my_data <- dbFetch(my_query, n=-1)
my_data
dbClearResult(my_query)
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr FROM RS_Tab", "SELECT Typ FROM RS_Tab")
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr FROM RS_Tab", & "SELECT Typ FROM RS_Tab")
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr FROM RS_Tab" & "SELECT Typ FROM RS_Tab")
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr, Typ FROM RS_Tab")
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr, Randform FROM RS_Tab")
RS_Tab_Fnr_RF <- dbFetch(Query_RS_Tab_Fnr_Typ, n=-1)
RS_Tab_Fnr_RF
aggregate(RS_Tab_Fnr_RF, by, FUN = sum)
aggregate(RS_Tab_Fnr_RF, by=list(Randform), FUN = sum)
aggregate(RS_Tab_Fnr_RF, by=list(Randform= Keramik_20190130$RS_Tab), FUN = sum)
aggregate(RS_Tab_Fnr_RF, by=list(Randform=RS_Tab), FUN = sum)
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF), FUN = sum)
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr, Randform FROM RS_Tab WHERE Randform IS NOT "NA")
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr, Randform FROM RS_Tab WHERE Randform IS NOT "na")
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr, Randform FROM RS_Tab)
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr, Randform FROM RS_Tab)
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr, Randform FROM RS_Tab")
dbClearResult(Query_RS_Tab_Fnr_Typ)
Query_RS_Tab_Fnr_Typ <- dbSendQuery(con, "SELECT Fundnr, Randform FROM RS_Tab")
RS_Tab_Fnr_RF <- dbFetch(Query_RS_Tab_Fnr_Typ, n=-1)
RS_Tab_Fnr_RF
dbClearResult(Query_RS_Tab_Fnr_Typ)
dbDisconnect(Keramik_20190130)
dbDisconnect(Keramik_20190130.db)
dbDisconnect(con)
con = dbConnect(SQLite(DB), dbname = "Keramik_20190130.db")
my_query <- dbSendQuery( con, "SELECT Fundnr, Randform FROM RS_Tab")
RS_Tab_Fnr_RF <- dbFetch(my_query, n=-1)
dbClearResult(my_query)
RS_Tab_Fnr_RF
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF), FUN = sum)
aggregate(RS_Tab_Fnr_RF, by=list(Randform), FUN = sum)
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF$Randform), FUN = sum)
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF$Fundnr), FUN = sum)
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF$Randform), FUN = summarize)
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF$Randform))
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF$Randform), FUN = least)
my_query2 <- dbSendQuery( con, "SELECT Fundnr, Randform, Anzahl FROM RS_Tab")
RS_Tab_Fnr_RF2 <- dbFetch(my_query2, n=-1)
RS_Tab_Fnr_RF2
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF$Randform), FUN = sum)
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF$Anzahl), FUN = sum)
my_query3 <- dbSendQuery( con, "SELECT Randform, Anzahl FROM RS_Tab")
RS_Tab_Fnr_RF2 <- dbFetch(my_query3, n=-1)
RS_Tab_Fnr_RF2
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF$Anzahl), FUN = sum)
my_query3 <- dbSendQuery( con, "SELECT Fundnr, Anzahl FROM RS_Tab")
RS_Tab_Fnr_RF3 <- dbFetch(my_query3, n=-1)
RS_Tab_Fnr_RF3
aggregate(RS_Tab_Fnr_RF, by=list(RS_Tab_Fnr_RF$Anzahl), FUN = sum)
aggregate(RS_Tab_Fnr_RF3, by=list(RS_Tab_Fnr_RF3$Anzahl), FUN = sum)
aggregate(RS_Tab_Fnr_RF3, by=list(RS_Tab_Fnr_RF3$Anzahl), FUN = median)
dbClearResult(my_query4)
dbClearResult(my_query3)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(dplyr)
save.image("C:\\Users\\anne.klammt\\Documents\\GitHub\\Keramik_Zastrow22\\test.RData")
q()
q()
